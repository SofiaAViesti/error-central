// <auto-generated />
using System;
using ErrorCentral.Infrastructure.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace ErrorCentral.Infra.Data.Migrations
{
    [DbContext(typeof(EventContext))]
    [Migration("20200727020927_PopulaBanco")]
    partial class PopulaBanco
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ErrorCentral.AppDomain.Models.EventLog", b =>
                {
                    b.Property<int>("EventID")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Archived")
                        .HasColumnName("Archived")
                        .HasColumnType("bit");

                    b.Property<string>("CollectedBy")
                        .IsRequired()
                        .HasColumnName("Collected")
                        .HasColumnType("nvarchar(255)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnName("CreatedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnName("Description")
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Environment")
                        .IsRequired()
                        .HasColumnName("Environment")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Level")
                        .IsRequired()
                        .HasColumnName("Level")
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnName("Log")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Origin")
                        .IsRequired()
                        .HasColumnName("Origin")
                        .HasColumnType("nvarchar(255)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnName("Title")
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("EventID");

                    b.ToTable("EventLog");

                    b.HasData(
                        new
                        {
                            EventID = 1000,
                            Archived = false,
                            CollectedBy = "yvqnygr3i1xl47wanrg2",
                            CreatedDate = new DateTime(2008, 5, 1, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an input-output operation failed or interrupted",
                            Environment = "Development",
                            Level = "ERROR",
                            Log = "IOException",
                            Origin = "app.server.com.br",
                            Title = "development.StaticOperation.Service: <failed>"
                        },
                        new
                        {
                            EventID = 1001,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2019, 6, 2, 9, 30, 1, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "ArithmeticException",
                            Origin = "127.0.0.1",
                            Title = "development.MathCondition.Service: <thrown>"
                        },
                        new
                        {
                            EventID = 1002,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2019, 7, 3, 9, 0, 52, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "homologation",
                            Level = "ERROR",
                            Log = "ArithmeticException",
                            Origin = "app.server.com.br",
                            Title = "development.MathCondition.Service: <thrown>"
                        },
                        new
                        {
                            EventID = 1003,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2019, 6, 1, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "homologation",
                            Level = "WARNING",
                            Log = "ArithmeticException",
                            Origin = "app.server.com.br",
                            Title = "development.MathCondition.Service: <thrown>"
                        },
                        new
                        {
                            EventID = 1004,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2019, 5, 1, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            Description = "This Exception is raised when a file is not accessible or does not open.",
                            Environment = "production",
                            Level = "ERROR",
                            Log = "FileNotFoundException",
                            Origin = "app.server.com.br",
                            Title = "production.RaisedUser.Service: <unreachable>"
                        },
                        new
                        {
                            EventID = 1005,
                            Archived = false,
                            CollectedBy = "abgy5vpriw79xmm2h4cz",
                            CreatedDate = new DateTime(2019, 5, 1, 8, 30, 52, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when referring to the members of a null object. Null represents nothing",
                            Environment = "homologation",
                            Level = "WARNING",
                            Log = "NullPointerException",
                            Origin = "10.0.1.1",
                            Title = "homologation.GetUserValidation.View: <null>"
                        },
                        new
                        {
                            EventID = 1006,
                            Archived = false,
                            CollectedBy = "abgy5vpriw79xmm2h4cz",
                            CreatedDate = new DateTime(2019, 7, 3, 9, 0, 52, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown by String class methods to indicate that an index is either negative than the size of the string",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "StringIndexOutOfBoundsException",
                            Origin = "127.0.0.1",
                            Title = "development.ListofObjects.Service: <unreachable>"
                        },
                        new
                        {
                            EventID = 1007,
                            Archived = false,
                            CollectedBy = "abgy5vpriw79xmm2h4cz",
                            CreatedDate = new DateTime(2019, 7, 3, 9, 0, 52, 0, DateTimeKind.Unspecified),
                            Description = "This represents any exception which occurs during runtime.",
                            Environment = "homologation",
                            Level = "WARNING",
                            Log = "RuntimeException",
                            Origin = "10.0.1.1",
                            Title = "development.Events.Service: <outoftime>"
                        },
                        new
                        {
                            EventID = 1008,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2019, 8, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "homologation",
                            Level = "DEBUG",
                            Log = "ArithmeticException",
                            Origin = "10.0.1.1",
                            Title = "development.MathCondition.Service: <thrown>"
                        },
                        new
                        {
                            EventID = 1009,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2019, 8, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when accessing a method which is not found.",
                            Environment = "production",
                            Level = "ERROR",
                            Log = "NoSuchMethodException",
                            Origin = "127.0.0.1",
                            Title = "production.GetUserList.Class : <unreachable>"
                        },
                        new
                        {
                            EventID = 1010,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2019, 1, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "This Exception is raised when we try to access a class whose definition is not found",
                            Environment = "production",
                            Level = "WARNING",
                            Log = "ClassNotFoundException",
                            Origin = "127.0.0.1",
                            Title = "production.GetEvent.Class : <notfound>"
                        },
                        new
                        {
                            EventID = 1012,
                            Archived = false,
                            CollectedBy = "xvsbo5fum53jznq00xca",
                            CreatedDate = new DateTime(2019, 1, 15, 5, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when a method could not convert a string into a numeric format.",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "NumberFormatException",
                            Origin = "127.0.0.1",
                            Title = "production.GetEvent.Class : <notauthorized>"
                        },
                        new
                        {
                            EventID = 1013,
                            Archived = false,
                            CollectedBy = "yvqnygr3i1xl47wanrg2",
                            CreatedDate = new DateTime(2019, 1, 15, 13, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when accessing a method which is not found.",
                            Environment = "homologation",
                            Level = "WARNING",
                            Log = "NoSuchMethodException",
                            Origin = "10.0.1.1",
                            Title = "homologation.GetUserList.Class : <notfound>"
                        },
                        new
                        {
                            EventID = 1014,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2019, 3, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when a method could not convert a string into a numeric format.",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "NumberFormatException",
                            Origin = "10.0.1.1",
                            Title = "development.UserName.GetEvent : <convert>"
                        },
                        new
                        {
                            EventID = 1015,
                            Archived = false,
                            CollectedBy = "xvsbo5fum53jznq00xca",
                            CreatedDate = new DateTime(2020, 1, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an input-output operation failed or interrupted",
                            Environment = "homologation",
                            Level = "DEBUG",
                            Log = "IOException",
                            Origin = "app.server.com.br",
                            Title = "homologation.MathCondition.Service: <failed>"
                        },
                        new
                        {
                            EventID = 1016,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 7, 15, 15, 25, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "ArrayIndexOutOfBoundsException",
                            Origin = "app.server.com.br",
                            Title = "development.Index.Access: <illegal>"
                        },
                        new
                        {
                            EventID = 1017,
                            Archived = false,
                            CollectedBy = "xvsbo5fum53jznq00xca",
                            CreatedDate = new DateTime(2020, 3, 15, 9, 20, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.",
                            Environment = "production",
                            Level = "WARNING",
                            Log = "ArrayIndexOutOfBoundsException",
                            Origin = "10.0.1.1",
                            Title = "production.Index.Access: <illegal>"
                        },
                        new
                        {
                            EventID = 1018,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 4, 15, 9, 20, 30, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "production",
                            Level = "ERROR",
                            Log = "ArithmeticException",
                            Origin = "app.server.com.br",
                            Title = "production.MathArray.Service: <exceptional>"
                        },
                        new
                        {
                            EventID = 1019,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 4, 15, 9, 20, 45, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a thread is waiting , sleeping , or doing some processing , and it is interrupted.",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "InterruptedException",
                            Origin = "app.server.com.br",
                            Title = "development.AccessThread.Service: <interrupted>"
                        },
                        new
                        {
                            EventID = 1020,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2020, 4, 15, 9, 20, 45, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.",
                            Environment = "homologation",
                            Level = "DEBUG",
                            Log = "ArrayIndexOutOfBoundsException",
                            Origin = "127.0.0.1",
                            Title = "homologation.MoqIndex.Service: <illegal>"
                        },
                        new
                        {
                            EventID = 1021,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 3, 15, 9, 20, 45, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when a method could not convert a string into a numeric format.",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "NumberFormatException",
                            Origin = "app.server.com.br",
                            Title = "development.GetID.API: <exception>"
                        },
                        new
                        {
                            EventID = 1022,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 6, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown by String class methods to indicate that an index is either negative than the size of the string",
                            Environment = "homologation",
                            Level = "DEBUG",
                            Log = "StringIndexOutOfBoundsException",
                            Origin = "10.0.1.1",
                            Title = "homologation.GetIndex.Interface: <string>"
                        },
                        new
                        {
                            EventID = 1023,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 6, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a class does not contain the field (or variable) specified",
                            Environment = "production",
                            Level = "DEBUG",
                            Log = "NoSuchFieldException",
                            Origin = "127.0.0.1",
                            Title = "production.UserName.Dbase: <thrown>"
                        },
                        new
                        {
                            EventID = 1024,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2020, 7, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown to indicate that an array has been accessed with an illegal index. The index is either negative or greater than or equal to the size of the array.",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "ArrayIndexOutOfBoundsException",
                            Origin = "app.server.com.br",
                            Title = "development.ListProducts.Service: <illegal>"
                        },
                        new
                        {
                            EventID = 1025,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 2, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when referring to the members of a null object. Null represents nothing",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "NullPointerException",
                            Origin = "app.server.com.br",
                            Title = "development.ListProducts.GetEvent: <exception>"
                        },
                        new
                        {
                            EventID = 1026,
                            Archived = false,
                            CollectedBy = "5zwo48gd9gnitmfnuizy",
                            CreatedDate = new DateTime(2020, 5, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when accessing a method which is not found.",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "NoSuchMethodException",
                            Origin = "app.server.com.br",
                            Title = "development.ListProducts.Access: <notfound>"
                        },
                        new
                        {
                            EventID = 1027,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 5, 1, 1, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when accessing a method which is not found.",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "NoSuchMethodException",
                            Origin = "app.server.com.br",
                            Title = "development.GetEvent.Service:<thrown>"
                        },
                        new
                        {
                            EventID = 1028,
                            Archived = false,
                            CollectedBy = "mgv7emwke7mr9mo5wsgj",
                            CreatedDate = new DateTime(2020, 5, 5, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a class does not contain the field (or variable) specified",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "NoSuchFieldException",
                            Origin = "10.0.1.1",
                            Title = "development.Index.Access: <notfound>"
                        },
                        new
                        {
                            EventID = 1029,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 5, 5, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a thread is waiting , sleeping , or doing some processing , and it is interrupted.",
                            Environment = "production",
                            Level = "ERROR",
                            Log = "InterruptedException",
                            Origin = "app.server.com.br",
                            Title = "production.GetEvent.Validation: <interrupted>"
                        },
                        new
                        {
                            EventID = 1030,
                            Archived = false,
                            CollectedBy = "mgv7emwke7mr9mo5wsgj",
                            CreatedDate = new DateTime(2020, 5, 5, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown by String class methods to indicate that an index is either negative than the size of the string",
                            Environment = "production",
                            Level = "DEBUG",
                            Log = "StringIndexOutOfBoundsException",
                            Origin = "app.server.com.br",
                            Title = "production.GetEvent.Validation: <badrequest>"
                        },
                        new
                        {
                            EventID = 1031,
                            Archived = false,
                            CollectedBy = "mriqxq386mq6vbfzhf4n",
                            CreatedDate = new DateTime(2020, 5, 15, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This represents any exception which occurs during runtime.",
                            Environment = "production",
                            Level = "ERROR",
                            Log = "RuntimeException",
                            Origin = "127.0.0.1",
                            Title = "production.GetEvent.Service: <exception>"
                        },
                        new
                        {
                            EventID = 1032,
                            Archived = false,
                            CollectedBy = "mriqxq386mq6vbfzhf4n",
                            CreatedDate = new DateTime(2020, 5, 15, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This Exception is raised when we try to access a class whose definition is not found",
                            Environment = "development",
                            Level = "WARNING",
                            Log = "ClassNotFoundException",
                            Origin = "127.0.0.1",
                            Title = "development.EventCheck.Access: <notfound>"
                        },
                        new
                        {
                            EventID = 1033,
                            Archived = false,
                            CollectedBy = "w0mr2nx5wayoj6heecsf",
                            CreatedDate = new DateTime(2020, 5, 15, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an exceptional condition has occurred in an arithmetic operation.",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "ArithmeticException",
                            Origin = "10.0.1.1",
                            Title = "development.MathArray.Service: <exceptional>"
                        },
                        new
                        {
                            EventID = 1034,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 5, 20, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an input-output operation failed or interrupted",
                            Environment = "production",
                            Level = "WARNING",
                            Log = "IOException",
                            Origin = "app.server.com.br",
                            Title = "production.SelectPrice.Service: <interrupted>"
                        },
                        new
                        {
                            EventID = 1035,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 5, 20, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when an input-output operation failed or interrupted",
                            Environment = "development",
                            Level = "DEBUG",
                            Log = "IOException",
                            Origin = "127.0.0.1",
                            Title = "development.GetOperation.Index: <interrupted>"
                        },
                        new
                        {
                            EventID = 1036,
                            Archived = false,
                            CollectedBy = "mriqxq386mq6vbfzhf4n",
                            CreatedDate = new DateTime(2020, 5, 20, 3, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a thread is waiting , sleeping , or doing some processing , and it is interrupted.",
                            Environment = "production",
                            Level = "WARNING",
                            Log = "InterruptedException",
                            Origin = "app.server.com.br",
                            Title = "production.GetUserList.Service: <thrown>"
                        },
                        new
                        {
                            EventID = 1037,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 5, 20, 5, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This represents any exception which occurs during runtime.",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "RuntimeException",
                            Origin = "10.0.1.1",
                            Title = "development.UserArray.AccessInterface: <exception>"
                        },
                        new
                        {
                            EventID = 1038,
                            Archived = false,
                            CollectedBy = "g5d9yj5plmeftg3goedl",
                            CreatedDate = new DateTime(2020, 4, 23, 5, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "It is thrown when a thread is waiting , sleeping , or doing some processing , and it is interrupted.",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "InterruptedException",
                            Origin = "10.0.1.1",
                            Title = "development.User.AddUser:<invalid>"
                        },
                        new
                        {
                            EventID = 1039,
                            Archived = false,
                            CollectedBy = "mgv7emwke7mr9mo5wsgj",
                            CreatedDate = new DateTime(2020, 5, 20, 5, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This exception is raised when a method could not convert a string into a numeric format.",
                            Environment = "production",
                            Level = "WARNING",
                            Log = "NumberFormatException",
                            Origin = "10.0.1.1",
                            Title = "production.MathArray.Service:<exception>"
                        },
                        new
                        {
                            EventID = 1040,
                            Archived = false,
                            CollectedBy = "mgv7emwke7mr9mo5wsgj",
                            CreatedDate = new DateTime(2020, 5, 20, 5, 30, 43, 0, DateTimeKind.Unspecified),
                            Description = "This Exception is raised when a file is not accessible or does not open.",
                            Environment = "development",
                            Level = "ERROR",
                            Log = "FileNotFoundException",
                            Origin = "10.0.1.1",
                            Title = "development.GetOperation.Service: <denied>"
                        });
                });

            modelBuilder.Entity("ErrorCentral.AppDomain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(6)")
                        .HasMaxLength(6);

                    b.HasKey("Id");

                    b.ToTable("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
